
import java.time.format.*;
import java.time.*;
import java.util.*;
import java.io.*;

class Account{
	private int Accno;
	private String Acctype;
	private LocalDate date;
	private double balance;
	
	
	public Account(int n,String t,LocalDate d,double b){
		Accno=n;
		Acctype=t;
		date=d;
		balance=b;
	}
	public void setAccno(int n){
		Accno=n;
	}
	public int getAccno(){
		return Accno;
	}
	public void setBalance(double b){
		balance=b;
	}
	public double getBalance(){
		return balance;
	}
	public void setAcctype(String t){
		Acctype=t;
	}
	public String getAcctype(){
		return Acctype;
	}
	public void setDate(LocalDate d){
		date=d;
	}
	public LocalDate getDate(){
		return date;
	}
	public void deposit(double amt){
		balance+=amt;
		System.out.println("deposit balance....."+balance);
	}
	public void withdraw(double amt){
	    if(balance-amt>0){
	        balance=balance-amt;
	        System.out.println("balance after withdraw....."+balance);
	    }
	    else{
	        System.out.println("Insufficient balance......");
	    }
	}
	/*public void getAllaccounts(ArrayList<Account> l){
		for (Account a : l) {
            System.out.println("Account number: " + a.getAccno());
            System.out.println("Account type: " + a.getAcctype());
            System.out.println("Date of creation: " + a.getDate());
            System.out.println("Balance of the Account: " + a.getBalance());
            System.out.println();
        }
	
    }*/
	
		
}
class TransData{
	private int TransID;
	private int Accno;
	private LocalDate date;
	private char type;
	private double amount;
	TransData(int id,int n,LocalDate d,char t,double amt){
		TransID=id;
		Accno=n;
		date=d;
		type=t;
		amount=amt;
	}
	public void setTransID(int id){
		TransID=id;
	}
	public int getTransID(){
		return TransID;
	}
	public void setAccno(int n){
		Accno=n;
	}
	public int getAccno(){
    		return Accno;
	}
	public void setDate(LocalDate d){
    		date=d;
	}
	public LocalDate getDate(){
    		return date;
	}
	public void setType(char t){
    		type=t;
	}
	public char getType(){
    		return type;
	}
	public void setAmount(double amt){
   		amount=amt;
	}
	public double getAmount(){
    		return amount;
	}
	
	
	/*public void getAlltransactions(ArrayList<TransData> l,int n){
		for (TransData t : l) {
			if(n==t.getAccno()){
            System.out.println("Transaction id: " + t.getTransID());
			System.out.println("Account number: " + t.getAccno());
            //System.out.println("date of transaction: " + t.getDate());
            System.out.println("type of transaction: " + t.getType());
            System.out.println("Balance of the Account: " + t.getAmount());
            System.out.println();
			}
        }
}*/
}

public class AccFile{
    public static void main(String args[]){
		
		
	LocalDate cur=LocalDate.now();
	//System.out.println(cur);
	LocalDate oridate=cur.minusMonths(6);
	//System.out.println(oridate);
	
	
	
	ArrayList<Account> arr=new ArrayList<Account>();
		
    try{
       
        //FileReader f1=new FileReader("C:/mastani/Account.txt");
		FileReader f1=new FileReader("E:\\Reshu\\Account.txt");
        BufferedReader b1=new BufferedReader(f1);
        String i;
        while((i=b1.readLine())!=null){
            StringTokenizer s=new StringTokenizer(i,",");
            Account a1=new Account(0,"",null,0.0);
            if(s.hasMoreTokens()){
                a1.setAccno(Integer.parseInt(s.nextToken()));
            }
            if(s.hasMoreTokens()){
                a1.setAcctype(s.nextToken());
            }
            if(s.hasMoreTokens()){
               DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
                a1.setDate(LocalDate.parse(s.nextToken(), formatter));
            }
            if(s.hasMoreTokens()){
                a1.setBalance(Double.parseDouble(s.nextToken()));
            }
        arr.add(a1);
		//a1.getAllaccounts(arr);
        }
    }catch(Exception e){
            e.printStackTrace();
        }
	
	
	
	ArrayList<TransData> tarr=new ArrayList<TransData>();
	try{
        FileReader f2=new FileReader("E:\\Reshu\\Transaction.txt");
        BufferedReader b2=new BufferedReader(f2);
        String j;
        while((j=b2.readLine())!=null){
            StringTokenizer s1=new StringTokenizer(j,",");
            TransData t1=new TransData(0,0,null,'o',0.0);
            if(s1.hasMoreTokens()){
                t1.setTransID(Integer.parseInt(s1.nextToken()));
            }
            if(s1.hasMoreTokens()){
                t1.setAccno(Integer.parseInt(s1.nextToken()));
            }
            if(s1.hasMoreTokens()){
               DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-MMM-yyyy");
                t1.setDate(LocalDate.parse(s1.nextToken(), formatter));
            }
            if(s1.hasMoreTokens()){
                t1.setType((s1.nextToken()).charAt(0));
            }
			if(s1.hasMoreTokens()){
                t1.setAmount(Double.parseDouble(s1.nextToken()));
            }
			tarr.add(t1);
			//t1.getAlltransactions(tarr,1002);
        }
        }catch(Exception e){
            e.printStackTrace();
        }
		
		
		
    Account Account1=arr.get(0);
	ArrayList<TransData> tarr1=new ArrayList<TransData>();

		for(TransData t:tarr){
			if(t.getAccno()==Account1.getAccno()){
				TransData t1 = new TransData(t.getTransID(), t.getAccno(), t.getDate(), t.getType(), t.getAmount());
				tarr1.add(t1);
			}
		}
		LocalDate date1 = LocalDate.of(2023, 7, 01);
        LocalDate date2 = LocalDate.of(2023, 7, 10);

        int sd = date1.getDayOfMonth();
        int ed = date2.getDayOfMonth();
		for(TransData t:tarr1){
			int today = t.getDate().getDayOfMonth();
		
			if ((today.getDate()).isAfter(sd) && (today.getDate()).isBefore(ed)) {
				tarr1.remove(today);
			}
            
		}		
		
		
	
	for (TransData t : tarr1) {
    System.out.println("Transaction ID: " + t.getTransID());
    System.out.println("Account number: " + t.getAccno());
    System.out.println("Date: " + t.getDate());
    System.out.println("Type: " + t.getType());
    System.out.println("Amount: " + t.getAmount());
    System.out.println();
	}
	}
}
	
